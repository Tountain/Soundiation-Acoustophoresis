%%
% management of saving and loading files' name.
%%

parameters;     % system parameters

%%
% ==== database files' for Beam&Scattering Coefficients ====

db_filename = ['BeamScatteringCoeff_size_', num2str(db_size_nn), ...
                '_', wave_type, ...
                '_', BC, ...
                '_BN', num2str(BN), ...
                '_beta', num2str(roundn(BETA,-2)), ...
                '_X0(ka)', num2str(roundn(X0/particle_radius, -1)), ...
                '_Y0(ka)', num2str(roundn(Y0/particle_radius, -1))];

% ==========================================================
% = database files' Bessel, Hankle and Harmonics Functions =


db_filename_BHH = ['BesselHankelHarmonics_size_', num2str(db_size_nn), ...
                '_', wave_type, ...
                '_', BC, ...
                '_BN', num2str(BN), ...
                '_beta', num2str(roundn(BETA,-2)), ...
                '_X0(ka)', num2str(roundn(X0/particle_radius, -1)), ...
                '_Y0(ka)', num2str(roundn(Y0/particle_radius, -1))];

% ==========================================================
% = database files' for InterBeam&Rescattering Coefficient =

if multi_particle ~= 0
    db_filename_ibs = ['InterBeamRescatteringCoeff_size_', num2str(db_size_nn), ...
                    '_', wave_type, ...
                    '_', BC, ...
                    '_BN', num2str(BN), ...
                    '_beta', num2str(roundn(BETA,-2)), ...
                    '_X0(ka)', num2str(roundn(X0/particle_radius, -1)), ...
                    '_Y0(ka)', num2str(roundn(Y0/particle_radius, -1))];
    db_filename_ts = ['TranslationCoeff_size_', num2str(db_size_nn), ...
                    '_', wave_type, ...
                    '_', BC, ...
                    '_BN', num2str(BN), ...
                    '_beta', num2str(roundn(BETA,-2)), ...
                    '_X0(ka)', num2str(roundn(X0/particle_radius, -1)), ...
                    '_Y0(ka)', num2str(roundn(Y0/particle_radius, -1))];
end

% ==========================================================
%%


%%
% ============= data saving force coefficients =============

% force_matrix_filename = ['p0_', num2str(p_0), '_', 'ForceMat_size_', num2str(db_size_nn), ...
%                 '_', wave_type, ...
%                 '_', BC, ...
%                 '_BN', num2str(BN), ...
%                 '_beta', num2str(roundn(BETA,-2)), ...
%                 '_X0', num2str(roundn(X0/particle_radius, -1)), ...
%                 '_Y0', num2str(roundn(Y0/particle_radius, -1))];

% ==========================================================


%%
% ================= data saving parameters =================


% filename = ['Pin_', num2str(roundn(p_inlet, -2)), 'Pa',...
%             '_ka', num2str(roundn(f_ka, -2)), '_', wave_type, ...
%             '_a', num2str(round(10^6*particle_radius)), 'um', ...
%             '_freq', num2str(round(10^-3*freq)), 'kHz', ...
%             '_X1(pr)', num2str(roundn(x_translation/particle_radius, -1)), ...
%             '_Y1(pr)', num2str(roundn(y_translation/particle_radius, -1)), ...
%             '_Z1(pr)', num2str(roundn(z_translation/particle_radius, -1)), ...
%             '_', BC, ...
%             '_BN', num2str(BN), ...
%             '_beta', num2str(roundn(BETA,-2)), ...
%             '_X0(pr)', num2str(roundn(X0/particle_radius, -1)), ...
%             '_Y0(pr)', num2str(roundn(Y0/particle_radius, -1)), ...
%             '_Z0(pr)', num2str(roundn(Z0/particle_radius, -1)), ...
%             '_range', num2str(range_r_coeff), ...
%             '_GridRes', num2str(grid_resolution)];
filename = ['irreg_', num2str(irregular_body), '_', ...
            'Cn_', num2str(length(Cn)), '_', ...
            'Pin_', num2str(roundn(p_inlet, -2)), 'Pa', ...
            '_', wave_type, ...
            '_a', num2str(round(10^6*particle_radius)), 'um', ...
            '_freq', num2str(round(10^-3*freq)), 'kHz', ...
            '_X1(pr)', num2str(roundn(deviationX/particle_radius, -1)), ...
            '_Y1(pr)', num2str(roundn(deviationY/particle_radius, -1)), ...
            '_Z1(pr)', num2str(roundn(deviationZ/particle_radius, -1)), ...
            '_', BC, ...
            '_N', num2str(db_size_nn), ...
            '_range', num2str(range_r_coeff)];
if strcmp(direction, 'X') == 1
    if strcmp(symbol, 'positive') == 1
        filename = ['X_', filename];
    end
    if strcmp(symbol, 'negative') == 1
        filename = ['Xanti_', filename];
    end
end
if strcmp(direction, 'Y') == 1
    if strcmp(symbol, 'positive') == 1
        filename = ['Y_', filename];
    end
    if strcmp(symbol, 'negative') == 1
        filename = ['Yanti_', filename];
    end
end
if strcmp(direction, 'Z') == 1
    if strcmp(symbol, 'positive') == 1
        filename = ['Z_', filename];
    end
    if strcmp(symbol, 'negative') == 1
        filename = ['Zanti_', filename];
    end
    if strcmp(symbol, 'arbitrary') == 1
        filename = ['Arb', num2str(roundn(theta_inc*180/pi, -1)), '_', num2str(roundn(phi_inc*180/pi, -1)), '_', filename];
    end
end
if strcmp(direction, 'XZ') == 1
    filename = ['XZ_', filename];
end
if (strcmp(wave_type, 'single_transducer') || strcmp(wave_type, 'phase_array_transducer') || strcmp(wave_type, 'phase_array_transducer2')) == 1
    filename = [filename, '_b', num2str(b/particle_radius), 'a_trans', num2str(transducer_number), '(', num2str(trans_radius*1000), 'mm)_dist_', num2str(inter_dist*1000), 'mm'];
    filename = [filename, '_Rot', num2str(roundn(theta_x*180/pi, -0)), '_', num2str(roundn(theta_y*180/pi, -0)), '_', num2str(roundn(theta_z*180/pi, -0))];
end

dir_file_pres = ['.\data_pres_', fluid, '\', filename];
dir_file_pres_ver = ['.\data_pres_', fluid, '_vertical', '\', filename];
dir_file_forces = ['.\data_forces_', fluid, '\', filename];
dir_file_torques = ['.\data_torques_', fluid, '\', filename];

dir_file_pres_multi = ['.\data_pres_', fluid, '_multi\', filename];
dir_file_pres_ver_multi = ['.\data_pres_', fluid, '_vertical', '_multi\', filename];
dir_file_forces_multi = ['.\data_forces_', fluid, '_multi\', filename];
dir_file_torques_multi = ['.\data_torques_', fluid, '_multi\', filename];

dir_file_pres_trans = ['.\data_pres_transducer_', fluid, '\', filename];
dir_file_pres_ver_trans = ['.\data_pres_transducer_', fluid, '_vertical', '\', filename];
dir_file_forces_trans = ['.\data_forces_transducer_', fluid, '\', filename];
dir_file_torques_trans = ['.\data_torques_transducer_', fluid, '\', filename];

% ==========================================================

